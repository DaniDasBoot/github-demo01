name: Security Review
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  security:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2
    permissions:
      contents: read
      pull-requests: write
      security-events: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Generate GitHub App token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-west-2

      - name: Invoke Bedrock
        id: security-review
        uses: anthropics/claude-code-action@v1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          use_bedrock: "true"
          settings: |
            {
              "model": "arn:aws:bedrock:us-west-2:912688296143:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0",
              "env": {
                "ANTHROPIC_DEFAULT_HAIKU_MODEL": "arn:aws:bedrock:us-west-2:912688296143:inference-profile/us.anthropic.claude-3-haiku-20240307-v1:0",
                "ANTHROPIC_DEFAULT_OPUS_MODEL": "arn:aws:bedrock:us-west-2:912688296143:inference-profile/us.anthropic.claude-opus-4-1-20250805-v1:0",
                "ANTHROPIC_DEFAULT_SONNET_MODEL": "arn:aws:bedrock:us-west-2:912688296143:inference-profile/us.anthropic.claude-sonnet-4-20250514-v1:0"
              }
            }
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            Perform a comprehensive security review:

            ## OWASP Top 10 Analysis
            - SQL Injection vulnerabilities
            - Cross-Site Scripting (XSS)
            - Broken Authentication
            - Sensitive Data Exposure
            - XML External Entities (XXE)
            - Broken Access Control
            - Security Misconfiguration
            - Cross-Site Request Forgery (CSRF)
            - Using Components with Known Vulnerabilities
            - Insufficient Logging & Monitoring

            ## Additional Security Checks
            - Hardcoded secrets or credentials
            - Insecure cryptographic practices
            - Unsafe deserialization
            - Server-Side Request Forgery (SSRF)
            - Race conditions or TOCTOU issues

            Rate SECURITY_STATUS as: CRITICAL, HIGH, MEDIUM, LOW, or NONE.
            Post detailed findings with recommendations.

            At the end of your response, you must include a line which indicates the security status of the analysis: "SECURITY_STATUS: [CRITICAL|HIGH|MEDIUM|LOW|NONE]"
            
          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,Bash(gh pr comment:*),Bash(gh pr diff:*)"
      
      - name: Parse Security Status
        id: parse-status
        run: |
          # Get Claude's response from the execution file
          EXECUTION_FILE="${{ steps.security-review.outputs.execution_file }}"

          # Debug: Check available outputs and execution file
          echo "=== Claude Action Outputs Debug ==="
          echo "Execution file: $EXECUTION_FILE"
          echo "Branch name: ${{ steps.security-review.outputs.branch_name }}"
          echo "GitHub token set: ${{ steps.security-review.outputs.github_token != '' }}"

          if [ -z "$EXECUTION_FILE" ]; then
            echo "::error::No execution file output from Claude action"
            echo "security_status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "claude_response=No execution file from Claude action" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ ! -f "$EXECUTION_FILE" ]; then
            echo "::error::Execution file does not exist: $EXECUTION_FILE"
            echo "security_status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "claude_response=Execution file not found: $EXECUTION_FILE" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Read Claude's response from the execution file
          RESPONSE=$(cat "$EXECUTION_FILE")
          echo "Response length: ${#RESPONSE}"

          if [ -z "$RESPONSE" ]; then
            echo "::error::Execution file is empty"
            echo "security_status=UNKNOWN" >> $GITHUB_OUTPUT
            echo "claude_response=Empty execution file" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Response preview (first 200 chars): ${RESPONSE:0:200}..."
          fi
          echo "================================="

          # Look for the SECURITY_STATUS line (case insensitive)
          SECURITY_LINE=$(echo "$RESPONSE" | grep -i "SECURITY_STATUS:" | tail -1)

          if [ -z "$SECURITY_LINE" ]; then
            echo "::warning::No SECURITY_STATUS found in Claude response, treating as MEDIUM risk"
            echo "security_status=MEDIUM" >> $GITHUB_OUTPUT
          else
            # Extract the status level (CRITICAL, HIGH, MEDIUM, LOW, NONE)
            STATUS=$(echo "$SECURITY_LINE" | sed -n 's/.*SECURITY_STATUS:[[:space:]]*\([A-Z_]*\).*/\1/p')
            echo "Found security status: $STATUS"
            echo "security_status=$STATUS" >> $GITHUB_OUTPUT
          fi

          # Also output the full response for debugging
          echo "claude_response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Debug Security Analysis
        # This following line disables the step; set to 'true' to enable
        if: false 
        run: |
          echo "Parsed Security Status: ${{ steps.parse-status.outputs.security_status }}"
          echo ""
          echo "Full Claude Response:"
          echo "${{ steps.parse-status.outputs.claude_response }}"

      - name: Evaluate Security Threshold
        env:
          SECURITY_STATUS: ${{ steps.parse-status.outputs.security_status }}
          # Configure which security levels should fail the workflow
          # You can customize these in your repository variables
          REPO_FAIL_ON_CRITICAL: ${{ vars.FAIL_ON_CRITICAL }}
          REPO_FAIL_ON_HIGH: ${{ vars.FAIL_ON_HIGH }}
          REPO_FAIL_ON_MEDIUM: ${{ vars.FAIL_ON_MEDIUM }}
          REPO_FAIL_ON_LOW: ${{ vars.FAIL_ON_LOW }}
        run: |
          # Set defaults for configuration variables
          FAIL_ON_CRITICAL="${REPO_FAIL_ON_CRITICAL:-true}"
          FAIL_ON_HIGH="${REPO_FAIL_ON_HIGH:-true}"
          FAIL_ON_MEDIUM="${REPO_FAIL_ON_MEDIUM:-false}"
          FAIL_ON_LOW="${REPO_FAIL_ON_LOW:-false}"

          echo "Security Status: $SECURITY_STATUS"
          echo "Threshold Configuration:"
          echo "  FAIL_ON_CRITICAL: $FAIL_ON_CRITICAL"
          echo "  FAIL_ON_HIGH: $FAIL_ON_HIGH"
          echo "  FAIL_ON_MEDIUM: $FAIL_ON_MEDIUM"
          echo "  FAIL_ON_LOW: $FAIL_ON_LOW"

          # Convert to uppercase for comparison
          STATUS_UPPER=$(echo "$SECURITY_STATUS" | tr '[:lower:]' '[:upper:]')

          SHOULD_FAIL=false

          case "$STATUS_UPPER" in
            "CRITICAL")
              if [ "$FAIL_ON_CRITICAL" = "true" ]; then
                SHOULD_FAIL=true
                echo "::error::PR blocked due to CRITICAL security issues"
              else
                echo "::notice::CRITICAL security issues found, but configured to allow merge"
              fi
              ;;
            "HIGH")
              if [ "$FAIL_ON_HIGH" = "true" ]; then
                SHOULD_FAIL=true
                echo "::error::PR blocked due to HIGH security issues"
              else
                echo "::notice::HIGH security issues found, but configured to allow merge"
              fi
              ;;
            "MEDIUM")
              if [ "$FAIL_ON_MEDIUM" = "true" ]; then
                SHOULD_FAIL=true
                echo "::error::PR blocked due to MEDIUM security issues"
              else
                echo "::notice::MEDIUM security issues found, but configured to allow merge"
              fi
              ;;
            "LOW")
              if [ "$FAIL_ON_LOW" = "true" ]; then
                SHOULD_FAIL=true
                echo "::error::PR blocked due to LOW security issues"
              else
                echo "::notice::LOW security issues found, but configured to allow merge"
              fi
              ;;
            "NONE")
              echo "::notice::No security issues found - PR approved"
              ;;
            "UNKNOWN")
              echo "::error::Could not determine security status due to Claude action failure"
              SHOULD_FAIL=true
              ;;
            *)
              echo "::warning::Unknown security status '$STATUS_UPPER', treating as failure for safety"
              SHOULD_FAIL=true
              ;;
          esac

          if [ "$SHOULD_FAIL" = "true" ]; then
            echo "Security review failed - check the detailed analysis above"
            exit 1
          else
            echo "Security review passed"
          fi
